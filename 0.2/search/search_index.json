{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"glyphtune","text":""},{"location":"index.html#glyphtune","title":"<code>glyphtune</code>","text":"<p>glyphtune is in pre-alpha, and so is this documentation.</p>"},{"location":"index.html#glyphtune.signal","title":"<code>glyphtune.signal</code>","text":"<p>Audio signal representation and manipulation.</p>"},{"location":"index.html#glyphtune.signal.Signal","title":"<code>Signal</code>","text":"<p>             Bases: <code>NDArrayOperatorsMixin</code></p> <p>Class representing audio signals.</p> <p>Basically a wrapper around a Numpy array with validation, properties, and manipulation methods specific to audio signals. Can be indexed like Numpy arrays, and can be passed to Python operators and Numpy functions in most ways, which returns a new signal if possible, or, if no possible signal results from an operation, a normal Numpy array is returned instead.</p>"},{"location":"index.html#glyphtune.signal.Signal.data","title":"<code>data: np.ndarray[Any, np.dtype[Any]]</code>  <code>property</code> <code>writable</code>","text":"<p>Array containing the data of the signal.</p>"},{"location":"index.html#glyphtune.signal.Signal.shape","title":"<code>shape: tuple[int, ...]</code>  <code>property</code>","text":"<p>Shape of the signal array.</p>"},{"location":"index.html#glyphtune.signal.Signal.channels","title":"<code>channels: int</code>  <code>property</code>","text":"<p>The number of channels of the signal.</p>"},{"location":"index.html#glyphtune.signal.Signal.length","title":"<code>length: int</code>  <code>property</code>","text":"<p>The length, in samples, of the signal.</p>"},{"location":"index.html#glyphtune.signal.Signal.is_mono","title":"<code>is_mono: bool</code>  <code>property</code>","text":"<p>Equivalent to <code>signal.channels == 1</code>.</p>"},{"location":"index.html#glyphtune.signal.Signal.is_stereo","title":"<code>is_stereo: bool</code>  <code>property</code>","text":"<p>Equivalent to <code>signal.channels == 2</code>.</p>"},{"location":"index.html#glyphtune.signal.Signal.absolute_peak","title":"<code>absolute_peak: numbers.Real</code>  <code>property</code>","text":"<p>Equivalent to <code>max(abs(signal.data))</code>.</p>"},{"location":"index.html#glyphtune.signal.Signal.dc_offset","title":"<code>dc_offset: np.ndarray[Any, np.dtype[Any]]</code>  <code>property</code>","text":"<p>DC offset (also known as DC bias) along each channel of the signal.</p>"},{"location":"index.html#glyphtune.signal.Signal.__init__","title":"<code>__init__(data: npt.ArrayLike) -&gt; None</code>","text":"<p>Initializes an audio signal with an array-like.</p> <p>Parameters:</p> <ul> <li> <code>data</code>             (<code>ArrayLike</code>)         \u2013          <p>numerical array-like of the shape (channels, samples).</p> </li> </ul>"},{"location":"index.html#glyphtune.signal.Signal.to_mono","title":"<code>to_mono() -&gt; Signal</code>","text":"<p>Returns the signal converted to mono.</p> <p>This is done by taking the mean along all channels of every sample.</p>"},{"location":"index.html#glyphtune.signal.Signal.expand_channels","title":"<code>expand_channels(channels: int) -&gt; Signal</code>","text":"<p>Returns the expansion of a mono signal into an arbitrary number of channels.</p> <p>This is done by tiling copies of the mono signal for each channel.</p>"},{"location":"index.html#glyphtune.signal.Signal.normalize","title":"<code>normalize() -&gt; Signal</code>","text":"<p>Returns the signal normalized between -1 and 1.</p>"},{"location":"index.html#glyphtune.signal.Signal.remove_dc_offset","title":"<code>remove_dc_offset() -&gt; Signal</code>","text":"<p>Returns the signal with the DC offset removed.</p>"},{"location":"index.html#glyphtune.signal.Signal.reverse","title":"<code>reverse() -&gt; Signal</code>","text":"<p>Returns the signal reversed.</p>"},{"location":"index.html#glyphtune.signal.is_signal_like","title":"<code>is_signal_like(data: npt.ArrayLike) -&gt; bool</code>","text":"<p>Returns whether the given data can be a signal.</p> <p>Parameters:</p> <ul> <li> <code>data</code>             (<code>ArrayLike</code>)         \u2013          <p>data to check.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms","title":"<code>glyphtune.waveforms</code>","text":"<p>A hierarchy of classes for creating waveforms and sampling them into audio signals.</p>"},{"location":"index.html#glyphtune.waveforms.Waveform","title":"<code>Waveform</code>","text":"<p>             Bases: <code>NDArrayOperatorsMixin</code></p> <p>Base class representing waveforms.</p> <p>Waveform objects do not store any audio data. Instead, they must generate that data when one of their sampling functions is called.</p> <p>Waveform objects can be used as operands with Python operators and as inputs to NumPy functions along with other waveforms and numbers. This returns a <code>waveforms.OperationWaveform</code>.</p>"},{"location":"index.html#glyphtune.waveforms.Waveform.sample_time","title":"<code>sample_time(time: signal.Signal) -&gt; signal.Signal</code>","text":"<p>Samples audio data given a time variable signal.</p> <p>Parameters:</p> <ul> <li> <code>time</code>             (<code>Signal</code>)         \u2013          <p>signal containing the values of the time variable at each sample point.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Signal</code>         \u2013          <p>The sampled signal of the waveform. The returned signal will be of the same shape as <code>time</code>. Each value in the returned signal is the sample of the waveform at the corresponding time value (in seconds) in <code>time</code>.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.Waveform.sample_seconds","title":"<code>sample_seconds(duration: float = 1, sampling_rate: int = 44100, start_offset: float = 0, channels: int = 2) -&gt; signal.Signal</code>","text":"<p>Samples audio data given time information in seconds.</p> <p>Parameters:</p> <ul> <li> <code>duration</code>             (<code>float</code>, default:                 <code>1</code> )         \u2013          <p>the duration of time to be sampled in seconds.</p> </li> <li> <code>sampling_rate</code>             (<code>int</code>, default:                 <code>44100</code> )         \u2013          <p>the sampling rate to use in samples per second.</p> </li> <li> <code>start_offset</code>             (<code>float</code>, default:                 <code>0</code> )         \u2013          <p>the starting offset in seconds.</p> </li> <li> <code>channels</code>             (<code>int</code>, default:                 <code>2</code> )         \u2013          <p>the number of channels to return.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Signal</code>         \u2013          <p>The sampled signal of the waveform. The returned signal will have the shape <code>(channels, ceil(sampling_rate*duration))</code>, containing <code>ceil(sampling_rate*duration)</code> samples for each channel.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.Waveform.sample_samples","title":"<code>sample_samples(count: int | None = None, sampling_rate: int = 44100, start_offset: int = 0, channels: int = 2) -&gt; signal.Signal</code>","text":"<p>Samples audio data given sample count information.</p> <p>Parameters:</p> <ul> <li> <code>count</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>the number of samples to take. If None, will be equal to <code>sampling_rate</code>.</p> </li> <li> <code>sampling_rate</code>             (<code>int</code>, default:                 <code>44100</code> )         \u2013          <p>the sampling rate to use in samples per second.</p> </li> <li> <code>start_offset</code>             (<code>int</code>, default:                 <code>0</code> )         \u2013          <p>the starting offset in samples.</p> </li> <li> <code>channels</code>             (<code>int</code>, default:                 <code>2</code> )         \u2013          <p>the number of channels to return.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Signal</code>         \u2013          <p>The sampled signal of the waveform. The returned signal will have the shape <code>(channels, count)</code>, containing <code>count</code> samples for each channel.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.OperationWaveform","title":"<code>OperationWaveform</code>","text":"<p>             Bases: <code>Waveform</code></p> <p>Waveform that is the result of an operation on other waveforms and numbers.</p> <p>\"lazily\" samples audio by recursively sampling the operands as needed and applying the operator on the resulting audio data. The operands may be waveforms or scalar values.</p> <p>Attributes:</p> <ul> <li> <code>operator</code>         \u2013          <p>the operator to be called on the operand signals when this waveform is sampled.</p> </li> <li> <code>operands</code>         \u2013          <p>the operands whose signals are passed to <code>operator</code> when this waveform is sampled.</p> </li> <li> <code>operator_kwargs</code>         \u2013          <p>the keyword arguments this waveform passes to <code>operator</code> when sampled.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.OperationWaveform.__init__","title":"<code>__init__(operator: Callable[..., Any], *operands: Waveform | float, **operator_kwargs: Any)</code>","text":"<p>Initializes an operation waveform with operands and operator information.</p> <p>Parameters:</p> <ul> <li> <code>operator</code>             (<code>Callable[..., Any]</code>)         \u2013          <p>the operator to use on the operand signals when the waveform is sampled. The operator should accept and return numerical array-like objects.</p> </li> <li> <code>*operands</code>             (<code>Waveform | float</code>, default:                 <code>()</code> )         \u2013          <p>operands whose signals are passed to <code>operator</code> when the waveform is sampled.</p> </li> <li> <code>**operator_kwargs</code>             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>keyword arguments to pass to <code>operator</code> when the waveform is sampled.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.ResampleWaveform","title":"<code>ResampleWaveform</code>","text":"<p>             Bases: <code>Waveform</code></p> <p>Waveform for resampling audio data.</p> <p>Attributes:</p> <ul> <li> <code>time_multiplier</code>         \u2013          <p>time/speed multiplier. Can be negative for reverse resampling.</p> </li> <li> <code>loop</code>         \u2013          <p>whether to replay the sample after it finishes.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.ResampleWaveform.original_audio","title":"<code>original_audio: signal.Signal</code>  <code>property</code> <code>writable</code>","text":"<p>Signal containing the audio data to resample.</p>"},{"location":"index.html#glyphtune.waveforms.ResampleWaveform.sampling_rate","title":"<code>sampling_rate: int</code>  <code>property</code> <code>writable</code>","text":"<p>The original sampling rate of the audio data, in samples per second.</p>"},{"location":"index.html#glyphtune.waveforms.ResampleWaveform.__init__","title":"<code>__init__(original_audio: signal.Signal, sampling_rate: int, time_multiplier: float = 1, loop: bool = False) -&gt; None</code>","text":"<p>Initializes a resample waveform with audio data.</p> <p>Parameters:</p> <ul> <li> <code>original_audio</code>             (<code>Signal</code>)         \u2013          <p>signal containing the audio data to resample.</p> </li> <li> <code>sampling_rate</code>             (<code>int</code>)         \u2013          <p>the original sampling rate of <code>original_audio</code>, in samples per second.</p> </li> <li> <code>time_multiplier</code>             (<code>float</code>, default:                 <code>1</code> )         \u2013          <p>time/speed multiplier. Can be negative for reverse resampling.</p> </li> <li> <code>loop</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>whether to replay the sample after it finishes.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.ResampleWaveform.full_repr","title":"<code>full_repr() -&gt; str</code>","text":"<p>Returns the string representation including the audio data array in its entirety.</p>"},{"location":"index.html#glyphtune.waveforms.ResampleWaveform.approx_equal","title":"<code>approx_equal(other: Any, absolute_tolerance: float = 1e-05, relative_tolerance: float = 1e-08) -&gt; bool</code>","text":"<p>Returns whether this waveform is approximately equal to another within a tolerence.</p> <p>Parameters:</p> <ul> <li> <code>other</code>             (<code>Any</code>)         \u2013          <p>waveform to compare to.</p> </li> <li> <code>absolute_tolerance</code>             (<code>float</code>, default:                 <code>1e-05</code> )         \u2013          <p>the absolute tolerance of the comparison.</p> </li> <li> <code>relative_tolerance</code>             (<code>float</code>, default:                 <code>1e-08</code> )         \u2013          <p>the relative tolerance of the comparison.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.PeriodicWave","title":"<code>PeriodicWave</code>","text":"<p>             Bases: <code>Waveform</code></p> <p>Periodic wave base class.</p> <p>Attributes:</p> <ul> <li> <code>phase</code>         \u2013          <p>initial phase offset of the periodic wave as a ratio of the period.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.PeriodicWave.frequency","title":"<code>frequency: float</code>  <code>property</code> <code>writable</code>","text":"<p>Frequency of the periodic wave in Hz.</p>"},{"location":"index.html#glyphtune.waveforms.PeriodicWave.__init__","title":"<code>__init__(frequency: float, phase: float = 0)</code>","text":"<p>Initializes a periodic wave.</p> <p>Parameters:</p> <ul> <li> <code>frequency</code>             (<code>float</code>)         \u2013          <p>frequency of the periodic wave in Hz.</p> </li> <li> <code>phase</code>             (<code>float</code>, default:                 <code>0</code> )         \u2013          <p>initial phase offset of the periodic wave as a ratio of the period.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.Sine","title":"<code>Sine</code>","text":"<p>             Bases: <code>PeriodicWave</code></p> <p>Waveform with a sine shape.</p>"},{"location":"index.html#glyphtune.waveforms.Sawtooth","title":"<code>Sawtooth</code>","text":"<p>             Bases: <code>PeriodicWave</code></p> <p>Waveform with a sawtooth shape.</p>"},{"location":"index.html#glyphtune.waveforms.Pulse","title":"<code>Pulse</code>","text":"<p>             Bases: <code>PeriodicWave</code></p> <p>Waveform with a pulse shape.</p>"},{"location":"index.html#glyphtune.waveforms.Pulse.duty_cycle","title":"<code>duty_cycle: float</code>  <code>property</code> <code>writable</code>","text":"<p>The fraction of one period in which the signal is high.</p>"},{"location":"index.html#glyphtune.waveforms.Pulse.__init__","title":"<code>__init__(frequency: float, phase: float = 0, duty_cycle: float = 0.5) -&gt; None</code>","text":"<p>Initializes a pulse wave.</p> <p>Parameters:</p> <ul> <li> <code>frequency</code>             (<code>float</code>)         \u2013          <p>frequency of the pulse wave in Hz.</p> </li> <li> <code>phase</code>             (<code>float</code>, default:                 <code>0</code> )         \u2013          <p>initial phase offset as a ratio of the period.</p> </li> <li> <code>duty_cycle</code>             (<code>float</code>, default:                 <code>0.5</code> )         \u2013          <p>the fraction of one period in which the signal is high.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.Square","title":"<code>Square</code>","text":"<p>             Bases: <code>PeriodicWave</code></p> <p>Waveform with a square shape.</p> <p>Special case of a pulse wave where the duty cycle is equal to 0.5.</p>"},{"location":"index.html#glyphtune.waveforms.Triangle","title":"<code>Triangle</code>","text":"<p>             Bases: <code>PeriodicWave</code></p> <p>Waveform with a triangle shape.</p>"},{"location":"index.html#glyphtune.waveforms.Triangle.rising_part","title":"<code>rising_part: float</code>  <code>property</code> <code>writable</code>","text":"<p>The fraction of one period in which the signal is rising.</p>"},{"location":"index.html#glyphtune.waveforms.Triangle.__init__","title":"<code>__init__(frequency: float, phase: float = 0, rising_part: float = 0.5) -&gt; None</code>","text":"<p>Initializes a triangle wave.</p> <p>Parameters:</p> <ul> <li> <code>frequency</code>             (<code>float</code>)         \u2013          <p>frequency of the square wave in Hz.</p> </li> <li> <code>phase</code>             (<code>float</code>, default:                 <code>0</code> )         \u2013          <p>initial phase offset as a ratio of the period.</p> </li> <li> <code>rising_part</code>             (<code>float</code>, default:                 <code>0.5</code> )         \u2013          <p>the fraction of one period in which the signal is rising.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.PhaseModulation","title":"<code>PhaseModulation</code>","text":"<p>             Bases: <code>Waveform</code></p> <p>Modulates a periodic wave's phase by another waveform's amplitude.</p> <p>Attributes:</p> <ul> <li> <code>modulator</code>         \u2013          <p>the modulator waveform.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.PhaseModulation.carrier","title":"<code>carrier: periodic_waves.PeriodicWave</code>  <code>property</code> <code>writable</code>","text":"<p>The periodic carrier of the modulation.</p>"},{"location":"index.html#glyphtune.waveforms.PhaseModulation.__init__","title":"<code>__init__(carrier: periodic_waves.PeriodicWave, modulator: waveform.Waveform) -&gt; None</code>","text":"<p>Initializes a phase modulation waveform.</p> <p>Parameters:</p> <ul> <li> <code>carrier</code>             (<code>PeriodicWave</code>)         \u2013          <p>the periodic wave whose phase will be modulated.</p> </li> <li> <code>modulator</code>             (<code>Waveform</code>)         \u2013          <p>the waveform used for the modulation.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.phase_modulate","title":"<code>phase_modulate(carrier: periodic_waves.PeriodicWave, *modulators: waveform.Waveform) -&gt; waveform.Waveform</code>","text":"<p>Returns a waveform resulting from phase modulation.</p> <p>The carrier's phase is shifted according to the amplitude of the sum of the modulators.</p> <p>Parameters:</p> <ul> <li> <code>carrier</code>             (<code>PeriodicWave</code>)         \u2013          <p>the periodic carrier waveform.</p> </li> <li> <code>*modulators</code>             (<code>Waveform</code>, default:                 <code>()</code> )         \u2013          <p>any number of modulator waveforms.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.amplitude_modulate","title":"<code>amplitude_modulate(carrier: waveform.Waveform, *modulators: waveform.Waveform) -&gt; waveform.Waveform</code>","text":"<p>Returns a waveform resulting from amplitude modulation.</p> <p>The carrier's amplitude is shifted according to the amplitude of the sum of the modulators.</p> <p>Parameters:</p> <ul> <li> <code>carrier</code>             (<code>Waveform</code>)         \u2013          <p>the carrier waveform.</p> </li> <li> <code>*modulators</code>             (<code>Waveform</code>, default:                 <code>()</code> )         \u2013          <p>any number of modulator waveforms.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.ring_modulate","title":"<code>ring_modulate(carrier: waveform.Waveform, *modulators: waveform.Waveform) -&gt; waveform.Waveform</code>","text":"<p>Returns a waveform resulting from ring modulation.</p> <p>The carrier's amplitude is multiplied by the amplitude of the product of the modulators.</p> <p>Parameters:</p> <ul> <li> <code>carrier</code>             (<code>Waveform</code>)         \u2013          <p>the carrier waveform.</p> </li> <li> <code>*modulators</code>             (<code>Waveform</code>, default:                 <code>()</code> )         \u2013          <p>any number of modulator waveforms.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.effects","title":"<code>glyphtune.waveforms.effects</code>","text":"<p>Waveforms that are effects that can be applied on other waveforms.</p>"},{"location":"index.html#glyphtune.waveforms.effects.Effect","title":"<code>Effect</code>","text":"<p>             Bases: <code>Waveform</code></p> <p>Base class representing effects.</p> <p>Attributes:</p> <ul> <li> <code>input_waveform</code>         \u2013          <p>the input waveform of the effect.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.effects.Effect.mix","title":"<code>mix: float</code>  <code>property</code> <code>writable</code>","text":"<p>Proportional multiplier of the effect's wet signal.</p> <p>The effect's wet signal will be multiplied by this value (therefore negative values mean inverted effect output). The dry signal will be multiplied by <code>1-abs(mix)</code>.</p>"},{"location":"index.html#glyphtune.waveforms.effects.Effect.__init__","title":"<code>__init__(input_waveform: waveform.Waveform, mix: float = 0.5) -&gt; None</code>","text":"<p>Initializes an effect.</p> <p>Parameters:</p> <ul> <li> <code>input_waveform</code>             (<code>Waveform</code>)         \u2013          <p>the input waveform of the effect.</p> </li> <li> <code>mix</code>             (<code>float</code>, default:                 <code>0.5</code> )         \u2013          <p>multiplier of the wet signal. The dry signal will be multiplied by <code>1-abs(mix)</code>.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.effects.Effect.sample_dry_wet","title":"<code>sample_dry_wet(time: signal.Signal) -&gt; tuple[signal.Signal, signal.Signal]</code>","text":"<p>Samples the dry and wet signals of the effect given a time variable signal.</p> <p>Parameters:</p> <ul> <li> <code>time</code>             (<code>Signal</code>)         \u2013          <p>signal containing the values of the time variable at each sample point.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[Signal, Signal]</code>         \u2013          <p>A tuple <code>(dry_signal, wet_signal)</code>. Both <code>dry_signal</code> and <code>wet_signal</code> are of the same shape as <code>time</code>. <code>dry_signal</code> contains the signal of the input waveform without applying the effect, and <code>wet_signal</code> contains the signal of the applied effect.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.effects.Effect.apply","title":"<code>apply(input_signal: signal.Signal) -&gt; signal.Signal</code>","text":"<p>Applies the effect on the given input signal.</p> <p>Effects that can generate output by simply altering the input audio should only have to implement this method. Effects that deal with more complex time-related manipulation should instead override <code>sample_dry_wet</code> and may just raise <code>NotImplementedError</code> in <code>apply</code>.</p> <p>Parameters:</p> <ul> <li> <code>input_signal</code>             (<code>Signal</code>)         \u2013          <p>input signal of the effect.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Signal</code>         \u2013          <p>The wet signal of the effect after being applied on <code>input_signal</code>. The returned signal will be of the same shape as <code>input_signal</code>.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.effects.StereoPan","title":"<code>StereoPan</code>","text":"<p>             Bases: <code>Effect</code></p> <p>Stereo pan effect.</p>"},{"location":"index.html#glyphtune.waveforms.effects.StereoPan.pan","title":"<code>pan: float</code>  <code>property</code> <code>writable</code>","text":"<p>Stereo pan value in the range [-1, 1] i.e., from entirely left to entirely right.</p>"},{"location":"index.html#glyphtune.waveforms.effects.StereoPan.__init__","title":"<code>__init__(input_waveform: waveform.Waveform, pan: float = 0, mix: float = 1) -&gt; None</code>","text":"<p>Initializes a stereo pan effect.</p> <p>Parameters:</p> <ul> <li> <code>input_waveform</code>             (<code>Waveform</code>)         \u2013          <p>the input waveform of the effect.</p> </li> <li> <code>pan</code>             (<code>float</code>, default:                 <code>0</code> )         \u2013          <p>stereo pan value in the range [-1, 1] i.e., from entirely left to entirely right.</p> </li> <li> <code>mix</code>             (<code>float</code>, default:                 <code>1</code> )         \u2013          <p>multiplier of the wet signal. The dry signal will be multiplied by <code>1-abs(mix)</code>.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.effects.StereoLevels","title":"<code>StereoLevels</code>","text":"<p>             Bases: <code>Effect</code></p> <p>An effect for setting each stereo channel's level independently.</p> <p>Attributes:</p> <ul> <li> <code>left_level</code>         \u2013          <p>the level of the left channel.</p> </li> <li> <code>right_level</code>         \u2013          <p>the level of the right channel.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.effects.StereoLevels.__init__","title":"<code>__init__(input_waveform: waveform.Waveform, left_level: float = 1, right_level: float = 1, mix: float = 1) -&gt; None</code>","text":"<p>Initializes a stereo levels effect.</p> <p>Parameters:</p> <ul> <li> <code>input_waveform</code>             (<code>Waveform</code>)         \u2013          <p>the input waveform of the effect.</p> </li> <li> <code>left_level</code>             (<code>float</code>, default:                 <code>1</code> )         \u2013          <p>the level of the left channel.</p> </li> <li> <code>right_level</code>             (<code>float</code>, default:                 <code>1</code> )         \u2013          <p>the level of the right channel.</p> </li> <li> <code>mix</code>             (<code>float</code>, default:                 <code>1</code> )         \u2013          <p>multiplier of the wet signal. The dry signal will be multiplied by <code>1-abs(mix)</code>.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.effects.StereoInterMix","title":"<code>StereoInterMix</code>","text":"<p>             Bases: <code>Effect</code></p> <p>An effect that sends signal from the left channel to the right channel and vice versa.</p> <p>Attributes:</p> <ul> <li> <code>right_to_left</code>         \u2013          <p>how much of the right channel to send to the left channel.</p> </li> <li> <code>left_to_right</code>         \u2013          <p>how much of the left channel to send to the right channel.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.effects.StereoInterMix.__init__","title":"<code>__init__(input_waveform: waveform.Waveform, right_to_left: float = 1, left_to_right: float = 1, mix: float = 0.5) -&gt; None</code>","text":"<p>Initializes a stereo inter-mix effect.</p> <p>Parameters:</p> <ul> <li> <code>input_waveform</code>             (<code>Waveform</code>)         \u2013          <p>the input waveform of the effect.</p> </li> <li> <code>right_to_left</code>             (<code>float</code>, default:                 <code>1</code> )         \u2013          <p>how much of the right channel to send to the left channel.</p> </li> <li> <code>left_to_right</code>             (<code>float</code>, default:                 <code>1</code> )         \u2013          <p>how much of the left channel to send to the right channel.</p> </li> <li> <code>mix</code>             (<code>float</code>, default:                 <code>0.5</code> )         \u2013          <p>multiplier of the wet signal. The dry signal will be multiplied by <code>1-abs(mix)</code>.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.effects.StereoDelay","title":"<code>StereoDelay</code>","text":"<p>             Bases: <code>Effect</code></p> <p>An effect that introduces a delay between the left and right channels (Haas effect).</p> <p>Attributes:</p> <ul> <li> <code>left_right_delay</code>         \u2013          <p>the delay between the left and right channels in seconds. A positive value means that the right channel's signal is delayed, and a negative value means that the left channel's signal is delayed.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.effects.StereoDelay.__init__","title":"<code>__init__(input_waveform: waveform.Waveform, left_right_delay: float = 0, mix: float = 1) -&gt; None</code>","text":"<p>Initializes a stereo delay effect.</p> <p>Parameters:</p> <ul> <li> <code>input_waveform</code>             (<code>Waveform</code>)         \u2013          <p>the input waveform of the effect.</p> </li> <li> <code>left_right_delay</code>             (<code>float</code>, default:                 <code>0</code> )         \u2013          <p>the delay between the left and right channels in seconds. A positive value means that the right channel's signal is delayed, and a negative value means that the left channel's signal is delayed.</p> </li> <li> <code>mix</code>             (<code>float</code>, default:                 <code>1</code> )         \u2013          <p>multiplier of the wet signal. The dry signal will be multiplied by <code>1-abs(mix)</code>.</p> </li> </ul>"},{"location":"index.html#glyphtune.io","title":"<code>glyphtune.io</code>","text":"<p>Audio I/O.</p>"},{"location":"index.html#glyphtune.io.StreamParameters","title":"<code>StreamParameters</code>  <code>dataclass</code>","text":"<p>Parameters used in audio stream I/O.</p> <p>Attributes:</p> <ul> <li> <code>channels</code>             (<code>int</code>)         \u2013          <p>number of channels.</p> </li> <li> <code>sampling_rate</code>             (<code>int</code>)         \u2013          <p>the sampling rate in samples per second.</p> </li> <li> <code>buffer_size</code>             (<code>int</code>)         \u2013          <p>the size of chunks to be streamed in samples.</p> </li> </ul>"},{"location":"index.html#glyphtune.io.StreamHandler","title":"<code>StreamHandler</code>","text":"<p>Abstract class for handling reading and writing to audio streams.</p> <p>Attributes:</p> <ul> <li> <code>stream_parameters</code>         \u2013          <p>audio I/O stream parameters.</p> </li> </ul>"},{"location":"index.html#glyphtune.io.StreamHandler.read","title":"<code>read(size: int) -&gt; bytes</code>","text":"<p>Returns audio data bytes from the stream.</p> <p>Parameters:</p> <ul> <li> <code>size</code>             (<code>int</code>)         \u2013          <p>the number of frames to read.</p> </li> </ul>"},{"location":"index.html#glyphtune.io.StreamHandler.write","title":"<code>write(data: bytes, size: int) -&gt; None</code>","text":"<p>Writes audio data bytes to the stream.</p> <p>Parameters:</p> <ul> <li> <code>data</code>             (<code>bytes</code>)         \u2013          <p>data to write.</p> </li> <li> <code>size</code>             (<code>int</code>)         \u2013          <p>the number of frames to write.</p> </li> </ul>"},{"location":"index.html#glyphtune.io.StreamHandler.close","title":"<code>close() -&gt; None</code>","text":"<p>Closes the stream.</p>"},{"location":"index.html#glyphtune.io.PyAudioHandler","title":"<code>PyAudioHandler</code>","text":"<p>             Bases: <code>StreamHandler</code></p> <p>A stream handler using PyAudio.</p>"},{"location":"index.html#glyphtune.io.FileParameters","title":"<code>FileParameters</code>  <code>dataclass</code>","text":"<p>Parameters used in audio file I/O.</p> <p>Attributes:</p> <ul> <li> <code>channels</code>             (<code>int</code>)         \u2013          <p>number of channels.</p> </li> <li> <code>sample_width</code>             (<code>int</code>)         \u2013          <p>the sample width in bytes.</p> </li> <li> <code>sampling_rate</code>             (<code>int</code>)         \u2013          <p>the sampling rate in samples per second.</p> </li> </ul>"},{"location":"index.html#glyphtune.io.FileHandler","title":"<code>FileHandler</code>","text":"<p>Abstract class for handling reading and writing an audio file format.</p> <p>Attributes:</p> <ul> <li> <code>path</code>         \u2013          <p>the path of the file being handled.</p> </li> </ul>"},{"location":"index.html#glyphtune.io.FileHandler.read","title":"<code>read() -&gt; tuple[FileParameters, bytes]</code>","text":"<p>Reads an audio file.</p> <p>Returns a tuple <code>(parameters, read_signal)</code> containing metadata and data read from the file.</p>"},{"location":"index.html#glyphtune.io.FileHandler.write","title":"<code>write(parameters: FileParameters, data: bytes) -&gt; None</code>","text":"<p>Writes an audio file.</p> <p>Parameters:</p> <ul> <li> <code>parameters</code>             (<code>FileParameters</code>)         \u2013          <p>file I/O parameters.</p> </li> <li> <code>data</code>             (<code>bytes</code>)         \u2013          <p>audio bytes to write.</p> </li> </ul>"},{"location":"index.html#glyphtune.io.WavHandler","title":"<code>WavHandler</code>","text":"<p>             Bases: <code>FileHandler</code></p> <p>A file handler for uncompressed wav files in integer format.</p>"},{"location":"index.html#glyphtune.io.record","title":"<code>record(duration: float = np.inf, stream_parameters: StreamParameters = StreamParameters(1), handler_type: type[StreamHandler] = PyAudioHandler) -&gt; signal.Signal</code>","text":"<p>Returns signal of recorded audio input.</p> <p>Parameters:</p> <ul> <li> <code>duration</code>             (<code>float</code>, default:                 <code>inf</code> )         \u2013          <p>the duration of time to record input, in seconds. If set to infinity, recording will continue until interrupted. Note that the recording may last longer than the specified duration until the last buffer is over. This is more noticeable with a large <code>buffer_size</code>.</p> </li> <li> <code>stream_parameters</code>             (<code>StreamParameters</code>, default:                 <code>StreamParameters(1)</code> )         \u2013          <p>the stream parameters to use.</p> </li> <li> <code>handler_type</code>             (<code>type[StreamHandler]</code>, default:                 <code>PyAudioHandler</code> )         \u2013          <p>subclass of <code>StreamHandler</code> that can handle audio stream I/O.</p> </li> </ul>"},{"location":"index.html#glyphtune.io.record_resample","title":"<code>record_resample(duration: float = np.inf, stream_parameters: StreamParameters = StreamParameters(1), handler_type: type[StreamHandler] = PyAudioHandler) -&gt; waveforms.ResampleWaveform</code>","text":"<p>Returns a waveform that resamples the recorded audio input.</p> <p>Parameters:</p> <ul> <li> <code>duration</code>             (<code>float</code>, default:                 <code>inf</code> )         \u2013          <p>the duration of time to record input, in seconds. If set to infinity, recording will continue until interrupted. Note that the recording may last longer than the specified duration until the last buffer is over. This is more noticeable with a large <code>buffer_size</code>.</p> </li> <li> <code>stream_parameters</code>             (<code>StreamParameters</code>, default:                 <code>StreamParameters(1)</code> )         \u2013          <p>the stream parameters to use.</p> </li> <li> <code>handler_type</code>             (<code>type[StreamHandler]</code>, default:                 <code>PyAudioHandler</code> )         \u2013          <p>subclass of <code>StreamHandler</code> that can handle audio stream I/O.</p> </li> </ul>"},{"location":"index.html#glyphtune.io.play","title":"<code>play(waveform: waveforms.Waveform, duration: float = np.inf, stream_parameters: StreamParameters = StreamParameters(), start_offset: float = 0, handler_type: type[StreamHandler] = PyAudioHandler) -&gt; None</code>","text":"<p>Samples and streams a waveform's output.</p> <p>Parameters:</p> <ul> <li> <code>waveform</code>             (<code>Waveform</code>)         \u2013          <p>waveform to be streamed.</p> </li> <li> <code>duration</code>             (<code>float</code>, default:                 <code>inf</code> )         \u2013          <p>the duration of time to sample the waveform for output, in seconds. If set to infinity, playback will continue until interrupted. Note that the playback may last longer than the specified duration until the last buffer is over. This is more noticeable with a large <code>buffer_size</code>.</p> </li> <li> <code>start_offset</code>             (<code>float</code>, default:                 <code>0</code> )         \u2013          <p>the starting offset with which to sample the waveform for output, in seconds.</p> </li> <li> <code>stream_parameters</code>             (<code>StreamParameters</code>, default:                 <code>StreamParameters()</code> )         \u2013          <p>the stream parameters to use.</p> </li> <li> <code>handler_type</code>             (<code>type[StreamHandler]</code>, default:                 <code>PyAudioHandler</code> )         \u2013          <p>subclass of <code>StreamHandler</code> that can handle audio stream I/O.</p> </li> </ul>"},{"location":"index.html#glyphtune.io.read","title":"<code>read(path: pathlib.Path | str, handler_type: type[FileHandler] | None = None) -&gt; tuple[FileParameters, signal.Signal]</code>","text":"<p>Reads an audio file.</p> <p>Parameters:</p> <ul> <li> <code>path</code>             (<code>Path | str</code>)         \u2013          <p>the path of the input file.</p> </li> <li> <code>handler_type</code>             (<code>type[FileHandler] | None</code>, default:                 <code>None</code> )         \u2013          <p>subclass of <code>FileHandler</code> that can handle the format of the input file. If None, an attempt will be made to find the right handler type from the file extension.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[FileParameters, Signal]</code>         \u2013          <p>A tuple <code>(parameters, read_signal)</code> containing metadata and data read from the file.</p> </li> </ul>"},{"location":"index.html#glyphtune.io.read_resample","title":"<code>read_resample(path: pathlib.Path | str, handler_type: type[FileHandler] | None = None) -&gt; waveforms.ResampleWaveform</code>","text":"<p>Reads an aduio file into a resample waveform.</p> <p>Parameters:</p> <ul> <li> <code>path</code>             (<code>Path | str</code>)         \u2013          <p>the path of the input file.</p> </li> <li> <code>handler_type</code>             (<code>type[FileHandler] | None</code>, default:                 <code>None</code> )         \u2013          <p>subclass of <code>FileHandler</code> that can handle the format of the input file. If None, an attempt will be made to find the right handler type from the file extension.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ResampleWaveform</code>         \u2013          <p>A waveform that resamples the audio data read from file.</p> </li> </ul>"},{"location":"index.html#glyphtune.io.write","title":"<code>write(waveform: waveforms.Waveform, path: pathlib.Path | str, duration: float, parameters: FileParameters, start_offset: float = 0, handler_type: type[FileHandler] | None = None) -&gt; None</code>","text":"<p>Writes waveform to file.</p> <p>Parameters:</p> <ul> <li> <code>waveform</code>             (<code>Waveform</code>)         \u2013          <p>the waveform to write.</p> </li> <li> <code>path</code>             (<code>Path | str</code>)         \u2013          <p>the path of the output file.</p> </li> <li> <code>duration</code>             (<code>float</code>)         \u2013          <p>the duration of time to sample the waveform for output, in seconds.</p> </li> <li> <code>start_offset</code>             (<code>float</code>, default:                 <code>0</code> )         \u2013          <p>the starting offset with which to sample the waveform for output, in seconds.</p> </li> <li> <code>parameters</code>             (<code>FileParameters</code>)         \u2013          <p>file I/O parameters.</p> </li> <li> <code>handler_type</code>             (<code>type[FileHandler] | None</code>, default:                 <code>None</code> )         \u2013          <p>subclass of <code>FileHandler</code> that can handle the format of the input file. If None, an attempt will be made to find the right handler type from the file extension.</p> </li> </ul>"}]}