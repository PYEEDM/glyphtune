var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"glyphtune","text":""},{"location":"index.html#glyphtune","title":"<code>glyphtune</code>","text":"<p>glyphtune is in pre-alpha, and so is this documentation.</p>"},{"location":"index.html#glyphtune.waveforms","title":"<code>glyphtune.waveforms</code>","text":"<p>A hierarchy of classes for creating waveforms and sampling them into arrays of audio data.</p>"},{"location":"index.html#glyphtune.waveforms.Waveform","title":"<code>Waveform</code>","text":"<p>             Bases: <code>NDArrayOperatorsMixin</code></p> <p>Base class representing waveforms.</p> <p>Waveform objects do not store any audio data. Instead, they must generate that data when one of their sampling functions is called.</p> <p>Waveform objects can be used as operands with Python operators and as inputs to NumPy functions along with other waveforms and numbers. This returns a <code>waveforms.OperationWaveform</code>.</p>"},{"location":"index.html#glyphtune.waveforms.Waveform.sample_arr","title":"<code>sample_arr(time_array: glyphtune.FloatArray) -&gt; glyphtune.FloatArray</code>","text":"<p>Returns an array containing the sampled signal of the waveform.</p> <p>The returned array will contain the same number of values as <code>time_array</code>. Each value in the returned array is the sample of the waveform's signal at the corresponding time value (in seconds) in <code>time_array</code>.</p> <p>Parameters:</p> <ul> <li> <code>time_array</code>             (<code>FloatArray</code>)         \u2013          <p>an array containing the values of the time variable at each sample point.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.Waveform.sample_seconds","title":"<code>sample_seconds(sampling_rate: int, duration: float, start_offset: float = 0) -&gt; glyphtune.FloatArray</code>","text":"<p>Returns an array containing the sampled signal of the waveform.</p> <p>The returned array will contain <code>ceil(sampling_rate*duration)</code> samples.</p> <p>Parameters:</p> <ul> <li> <code>sampling_rate</code>             (<code>int</code>)         \u2013          <p>the sampling rate to use in samples per second.</p> </li> <li> <code>duration</code>             (<code>float</code>)         \u2013          <p>the duration of time to be sampled in seconds.</p> </li> <li> <code>start_offset</code>             (<code>float</code>, default:                 <code>0</code> )         \u2013          <p>the starting offset in seconds.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.Waveform.sample_samples","title":"<code>sample_samples(sampling_rate: int, count: int, start_offset: int = 0) -&gt; glyphtune.FloatArray</code>","text":"<p>Returns an array containing the sampled signal of the waveform.</p> <p>The returned array will contain <code>count</code> samples.</p> <p>Parameters:</p> <ul> <li> <code>sampling_rate</code>             (<code>int</code>)         \u2013          <p>the sampling rate to use in samples per second.</p> </li> <li> <code>count</code>             (<code>int</code>)         \u2013          <p>the number of samples to take.</p> </li> <li> <code>start_offset</code>             (<code>int</code>, default:                 <code>0</code> )         \u2013          <p>the starting offset in samples.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.OperationWaveform","title":"<code>OperationWaveform</code>","text":"<p>             Bases: <code>Waveform</code></p> <p>Waveform that is the result of an operation on other waveforms and numbers.</p> <p>\"lazily\" samples audio by recursively sampling the operands as needed and applying the operator on the resulting audio data. The operands may be waveforms or scalar values.</p>"},{"location":"index.html#glyphtune.waveforms.OperationWaveform.operator","title":"<code>operator: Callable[..., Any]</code>  <code>property</code>","text":"<p>The operator of this waveform.</p>"},{"location":"index.html#glyphtune.waveforms.OperationWaveform.operands","title":"<code>operands: tuple[Waveform | float, ...]</code>  <code>property</code>","text":"<p>A copy of the operands of this waveform.</p>"},{"location":"index.html#glyphtune.waveforms.OperationWaveform.operator_kwargs","title":"<code>operator_kwargs: dict[str, Any]</code>  <code>property</code>","text":"<p>A copy of the keyword arguments this waveform passes to its operator when sampled.</p>"},{"location":"index.html#glyphtune.waveforms.OperationWaveform.__init__","title":"<code>__init__(operator: Callable[..., Any], *operands: Waveform | float, **operator_kwargs: Any)</code>","text":"<p>Initializes an operation waveform with operands and operator information.</p> <p>Parameters:</p> <ul> <li> <code>operator</code>             (<code>Callable[..., Any]</code>)         \u2013          <p>the operator to use on the (sampled) operands when the waveform is sampled. The operator should take float arrays/numbers as input and return a float array.</p> </li> <li> <code>*operands</code>             (<code>Waveform | float</code>, default:                 <code>()</code> )         \u2013          <p>operands whose (sampled) output is passed to the operator when the waveform is sampled.</p> </li> <li> <code>**operator_kwargs</code>             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>keyword arguments to pass to <code>operator</code> when the waveform is sampled.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.PeriodicWave","title":"<code>PeriodicWave</code>","text":"<p>             Bases: <code>Waveform</code></p> <p>Periodic wave base class.</p> <p>Attributes:</p> <ul> <li> <code>phase</code>         \u2013          <p>initial phase offset of the periodic wave as a ratio of the period.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.PeriodicWave.frequency","title":"<code>frequency: float</code>  <code>property</code> <code>writable</code>","text":"<p>Frequency of the periodic wave in Hz.</p>"},{"location":"index.html#glyphtune.waveforms.PeriodicWave.__init__","title":"<code>__init__(frequency: float, phase: float = 0)</code>","text":"<p>Initializes a periodic wave.</p> <p>Parameters:</p> <ul> <li> <code>frequency</code>             (<code>float</code>)         \u2013          <p>frequency of the periodic wave in Hz.</p> </li> <li> <code>phase</code>             (<code>float</code>, default:                 <code>0</code> )         \u2013          <p>initial phase offset of the periodic wave as a ratio of the period.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.Sine","title":"<code>Sine</code>","text":"<p>             Bases: <code>PeriodicWave</code></p> <p>Waveform with a sine shape.</p>"},{"location":"index.html#glyphtune.waveforms.Sawtooth","title":"<code>Sawtooth</code>","text":"<p>             Bases: <code>PeriodicWave</code></p> <p>Waveform with a sawtooth shape.</p>"},{"location":"index.html#glyphtune.waveforms.Pulse","title":"<code>Pulse</code>","text":"<p>             Bases: <code>PeriodicWave</code></p> <p>Waveform with a pulse shape.</p>"},{"location":"index.html#glyphtune.waveforms.Pulse.duty_cycle","title":"<code>duty_cycle: float</code>  <code>property</code> <code>writable</code>","text":"<p>The fraction of one period in which the signal is high.</p>"},{"location":"index.html#glyphtune.waveforms.Pulse.__init__","title":"<code>__init__(frequency: float, phase: float = 0, duty_cycle: float = 0.5) -&gt; None</code>","text":"<p>Initializes a pulse wave.</p> <p>Parameters:</p> <ul> <li> <code>frequency</code>             (<code>float</code>)         \u2013          <p>frequency of the pulse wave in Hz.</p> </li> <li> <code>phase</code>             (<code>float</code>, default:                 <code>0</code> )         \u2013          <p>initial phase offset as a ratio of the period.</p> </li> <li> <code>duty_cycle</code>             (<code>float</code>, default:                 <code>0.5</code> )         \u2013          <p>the fraction of one period in which the signal is high.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.Square","title":"<code>Square</code>","text":"<p>             Bases: <code>Pulse</code></p> <p>Waveform with a square shape.</p> <p>Special case of a pulse wave where the duty cycle is equal to 0.5.</p>"},{"location":"index.html#glyphtune.waveforms.Square.__init__","title":"<code>__init__(frequency: float, phase: float = 0) -&gt; None</code>","text":"<p>Initializes a square wave.</p> <p>Parameters:</p> <ul> <li> <code>frequency</code>             (<code>float</code>)         \u2013          <p>frequency of the square wave in Hz.</p> </li> <li> <code>phase</code>             (<code>float</code>, default:                 <code>0</code> )         \u2013          <p>initial phase offset as a ratio of the period.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.Triangle","title":"<code>Triangle</code>","text":"<p>             Bases: <code>PeriodicWave</code></p> <p>Waveform with a triangle shape.</p>"},{"location":"index.html#glyphtune.waveforms.Triangle.rising_part","title":"<code>rising_part: float</code>  <code>property</code> <code>writable</code>","text":"<p>The fraction of one period in which the signal is rising.</p>"},{"location":"index.html#glyphtune.waveforms.Triangle.__init__","title":"<code>__init__(frequency: float, phase: float = 0, rising_part: float = 0.5) -&gt; None</code>","text":"<p>Initializes a triangle wave.</p> <p>Parameters:</p> <ul> <li> <code>frequency</code>             (<code>float</code>)         \u2013          <p>frequency of the square wave in Hz.</p> </li> <li> <code>phase</code>             (<code>float</code>, default:                 <code>0</code> )         \u2013          <p>initial phase offset as a ratio of the period.</p> </li> <li> <code>rising_part</code>             (<code>float</code>, default:                 <code>0.5</code> )         \u2013          <p>the fraction of one period in which the signal is rising.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.DerivativeWaveform","title":"<code>DerivativeWaveform</code>","text":"<p>             Bases: <code>Waveform</code></p> <p>A waveform that is the derivative of another waveform.</p> <p>Attributes:</p> <ul> <li> <code>input_waveform</code>         \u2013          <p>waveform being differentiated.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.DerivativeWaveform.__init__","title":"<code>__init__(input_waveform: waveform.Waveform) -&gt; None</code>","text":"<p>Initializes a derivative waveform.</p> <p>Parameters:</p> <ul> <li> <code>input_waveform</code>             (<code>Waveform</code>)         \u2013          <p>waveform to differentiate.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.IntegralWaveform","title":"<code>IntegralWaveform</code>","text":"<p>             Bases: <code>Waveform</code></p> <p>A waveform that is the integral of another waveform.</p> <p>Can use dynamic offset; When enabled, the integral waveform will store the last value of the integral computed by <code>IntegralWaveform.sample_arr</code> and offset the next result by it. This is useful for integrating waveforms in consecutive chunks without losing continuity.</p>"},{"location":"index.html#glyphtune.waveforms.IntegralWaveform.input_waveform","title":"<code>input_waveform: waveform.Waveform</code>  <code>property</code> <code>writable</code>","text":"<p>Waveform being integrated.</p>"},{"location":"index.html#glyphtune.waveforms.IntegralWaveform.dynamic_offset","title":"<code>dynamic_offset: bool</code>  <code>property</code> <code>writable</code>","text":"<p>Whether this integral waveform uses dynamic offset (see <code>IntegralWaveform</code> for info)</p>"},{"location":"index.html#glyphtune.waveforms.IntegralWaveform.__init__","title":"<code>__init__(input_waveform: waveform.Waveform, dynamic_offset: bool = True) -&gt; None</code>","text":"<p>Initializes an integral waveform.</p> <p>Parameters:</p> <ul> <li> <code>input_waveform</code>             (<code>Waveform</code>)         \u2013          <p>waveform to integrate.</p> </li> <li> <code>dynamic_offset</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>whether to use dynamic offset (see <code>IntegralWaveform</code> for info).</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.IntegralWaveform.reset_offset","title":"<code>reset_offset() -&gt; None</code>","text":"<p>Resets the dynamic offset to the initial value of 0.</p>"},{"location":"index.html#glyphtune.waveforms.PhaseModulation","title":"<code>PhaseModulation</code>","text":"<p>             Bases: <code>Waveform</code></p> <p>Modulates a periodic wave's phase/frequency by another waveform's amplitude.</p> <p>Attributes:</p> <ul> <li> <code>frequency_modulation</code>         \u2013          <p>whether the frequency of the carrier will be modulated rather than the phase.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.PhaseModulation.carrier","title":"<code>carrier: periodic_waves.PeriodicWave</code>  <code>property</code> <code>writable</code>","text":"<p>The periodic carrier of the modulation.</p>"},{"location":"index.html#glyphtune.waveforms.PhaseModulation.modulator","title":"<code>modulator: waveform.Waveform</code>  <code>property</code> <code>writable</code>","text":"<p>The modulator waveform.</p>"},{"location":"index.html#glyphtune.waveforms.PhaseModulation.__init__","title":"<code>__init__(carrier: periodic_waves.PeriodicWave, modulator: waveform.Waveform, frequency_modulation: bool = False) -&gt; None</code>","text":"<p>Initializes a phase modulation waveform.</p> <p>Parameters:</p> <ul> <li> <code>carrier</code>             (<code>PeriodicWave</code>)         \u2013          <p>the periodic wave whose phase/frequency will be modulated.</p> </li> <li> <code>modulator</code>             (<code>Waveform</code>)         \u2013          <p>the waveform used for the modulation.</p> </li> <li> <code>frequency_modulation</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>whether the frequency of the carrier will be modulated rather than the phase.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.phase_modulate","title":"<code>phase_modulate(carrier: periodic_waves.PeriodicWave, *modulators: waveform.Waveform) -&gt; waveform.Waveform</code>","text":"<p>Returns a waveform resulting from phase modulation.</p> <p>The carrier's phase is shifted according to the amplitude of the sum of the modulators.</p> <p>Parameters:</p> <ul> <li> <code>carrier</code>             (<code>PeriodicWave</code>)         \u2013          <p>the periodic carrier waveform.</p> </li> <li> <code>*modulators</code>             (<code>Waveform</code>, default:                 <code>()</code> )         \u2013          <p>any number of modulator waveforms.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.amplitude_modulate","title":"<code>amplitude_modulate(carrier: waveform.Waveform, *modulators: waveform.Waveform) -&gt; waveform.Waveform</code>","text":"<p>Returns a waveform resulting from amplitude modulation.</p> <p>The carrier's amplitude is shifted according to the amplitude of the sum of the modulators.</p> <p>Parameters:</p> <ul> <li> <code>carrier</code>             (<code>Waveform</code>)         \u2013          <p>the carrier waveform.</p> </li> <li> <code>*modulators</code>             (<code>Waveform</code>, default:                 <code>()</code> )         \u2013          <p>any number of modulator waveforms.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.ring_modulate","title":"<code>ring_modulate(carrier: waveform.Waveform, *modulators: waveform.Waveform) -&gt; waveform.Waveform</code>","text":"<p>Returns a waveform resulting from ring modulation.</p> <p>The carrier's amplitude is multiplied by the amplitude of the product of the modulators.</p> <p>Parameters:</p> <ul> <li> <code>carrier</code>             (<code>Waveform</code>)         \u2013          <p>the carrier waveform.</p> </li> <li> <code>*modulators</code>             (<code>Waveform</code>, default:                 <code>()</code> )         \u2013          <p>any number of modulator waveforms.</p> </li> </ul>"},{"location":"index.html#glyphtune.waveforms.frequency_modulate","title":"<code>frequency_modulate(carrier: periodic_waves.PeriodicWave, *modulators: waveform.Waveform) -&gt; waveform.Waveform</code>","text":"<p>Returns a waveform resulting from frequency modulation.</p> <p>The carrier's phase is shifted according to the amplitude of the integral of the sum of the modulators.</p> <p>Parameters:</p> <ul> <li> <code>carrier</code>             (<code>PeriodicWave</code>)         \u2013          <p>the periodic carrier waveform.</p> </li> <li> <code>*modulators</code>             (<code>Waveform</code>, default:                 <code>()</code> )         \u2013          <p>any number of modulator waveforms.</p> </li> </ul>"},{"location":"index.html#glyphtune.output","title":"<code>glyphtune.output</code>","text":"<p>Audio output.</p>"},{"location":"index.html#glyphtune.output.MonoStream","title":"<code>MonoStream</code>","text":"<p>Audio stream with mono output.</p>"},{"location":"index.html#glyphtune.output.MonoStream.sampling_rate","title":"<code>sampling_rate: int</code>  <code>property</code> <code>writable</code>","text":"<p>Sampling rate of the output stream.</p>"},{"location":"index.html#glyphtune.output.MonoStream.buffer_size","title":"<code>buffer_size: int</code>  <code>property</code> <code>writable</code>","text":"<p>Buffer size of the output stream.</p>"},{"location":"index.html#glyphtune.output.MonoStream.__init__","title":"<code>__init__(sampling_rate: int = 44100, buffer_size: int = 512) -&gt; None</code>","text":"<p>Initializes a mono audio stream.</p> <p>Parameters:</p> <ul> <li> <code>sampling_rate</code>             (<code>int</code>, default:                 <code>44100</code> )         \u2013          <p>the sampling rate to use in samples per second.</p> </li> <li> <code>buffer_size</code>             (<code>int</code>, default:                 <code>512</code> )         \u2013          <p>the size of chunks to be streamed in samples.</p> </li> </ul>"},{"location":"index.html#glyphtune.output.MonoStream.stream_waveform","title":"<code>stream_waveform(waveform: waveforms.Waveform) -&gt; None</code>","text":"<p>Stream a waveform until <code>SystemExit</code> or <code>KeyboardInterrupt</code> is raised.</p> <p>Parameters:</p> <ul> <li> <code>waveform</code>             (<code>Waveform</code>)         \u2013          <p>waveform to be streamed.</p> </li> </ul>"}]}